name: CI

"on":
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  TERRAFORM_VERSION: "1.10.3"
  TFLINT_VERSION: "v0.54.0"
  TERRAFORM_DOCS_VERSION: "v0.19.0"
  CHECKOV_VERSION: "3.2.443"

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate

  tflint:
    name: TFLint
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Cache TFLint plugins
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ runner.os }}-${{ hashFiles('.tflint.hcl') }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint --format=compact

  security:
    name: Security Scanning
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Trivy (modern replacement for tfsec)
        uses: aquasecurity/trivy-action@v0.31.0
        with:
          scan-type: "config"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

  docs:
    name: Documentation
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Render terraform docs
        uses: terraform-docs/gh-actions@v1.4.1
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: "true"
          git-push-user-name: "terraform-docs[bot]"
          git-push-user-email: "terraform-docs[bot]@users.noreply.github.com"
          git-commit-message: "docs: update README.md with terraform-docs"

  examples:
    name: Test Examples
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    strategy:
      matrix:
        example: [minimal, complete]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: terraform plan -input=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  integration:
    name: Integration Test (ephemeral repo)
    runs-on: ubuntu-24.04
    # Run only on main/develop pushes or manual dispatch to avoid API rate limits on PRs
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
    needs: [validate, examples] # Ensure static checks pass first
    strategy:
      matrix:
        example: [minimal, complete]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Authenticate gh CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create ephemeral test repository
        id: repo
        run: |
          OWNER="${{ github.repository_owner }}"
          REPO_NAME="tmp-gitflow-test-${{ matrix.example }}-${{ github.run_id }}"
          echo "Creating temporary repository: $OWNER/$REPO_NAME"
          gh repo create "$OWNER/$REPO_NAME" --private --confirm
          echo "repo_name=$REPO_NAME" >> "$GITHUB_OUTPUT"
          echo "full_name=$OWNER/$REPO_NAME" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Init
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: terraform init -backend=false

      - name: Terraform Apply
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: |
          terraform apply -auto-approve \
            -var="github_owner=${{ github.repository_owner }}" \
            -var="repository_name=${{ steps.repo.outputs.repo_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify repository configuration
        run: |
          echo "Verifying repository was configured correctly..."
          gh repo view "${{ steps.repo.outputs.full_name }}" --json name,visibility,hasWikiEnabled
          gh api repos/${{ steps.repo.outputs.full_name }}/rulesets --jq '.[] | {name: .name, enforcement: .enforcement}'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Destroy
        if: always()
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: |
          terraform destroy -auto-approve \
            -var="github_owner=${{ github.repository_owner }}" \
            -var="repository_name=${{ steps.repo.outputs.repo_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete ephemeral repository
        if: always()
        run: |
          echo "Cleaning up temporary repository: ${{ steps.repo.outputs.full_name }}"
          gh repo delete "${{ steps.repo.outputs.full_name }}" --confirm
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
