name: CI

"on":
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  TERRAFORM_VERSION: "1.10.3"
  TFLINT_VERSION: "v0.54.0"
  TERRAFORM_DOCS_VERSION: "v0.19.0"
  CHECKOV_VERSION: "3.2.443"

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate

  tflint:
    name: TFLint
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Cache TFLint plugins
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ runner.os }}-${{ hashFiles('.tflint.hcl') }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint --format=compact

  security:
    name: Security Scanning
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Trivy (modern replacement for tfsec)
        uses: aquasecurity/trivy-action@v0.31.0
        with:
          scan-type: "config"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

  docs:
    name: Documentation
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Render terraform docs
        uses: terraform-docs/gh-actions@v1.4.1
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: "true"
          git-push-user-name: "terraform-docs[bot]"
          git-push-user-email: "terraform-docs[bot]@users.noreply.github.com"
          git-commit-message: "docs: update README.md with terraform-docs"

  examples:
    name: Test Examples
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    strategy:
      matrix:
        example: [minimal, complete]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup example variables
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: |
          if [ -f terraform.tfvars.example ]; then
            cp terraform.tfvars.example terraform.tfvars
          fi

      - name: Terraform Init
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: terraform validate

      - name: Create temporary repositories for plan
        id: temp_repo
        run: |
          # Generate unique repository names with multiple safety prefixes
          TIMESTAMP=$(date +%s)
          REPO_NAME="temp-ci-plan-${{ matrix.example }}-${{ github.run_id }}-${TIMESTAMP}"
          TRUNK_REPO_NAME="temp-ci-trunk-${{ matrix.example }}-${{ github.run_id }}-${TIMESTAMP}"

          # Safety check: ensure names contain required safety prefixes
          if [[ ! "$REPO_NAME" =~ ^temp-ci- ]]; then
            echo "ERROR: Repository name '$REPO_NAME' does not contain required safety prefix 'temp-ci-'"
            exit 1
          fi

          echo "Creating temporary repository: $REPO_NAME"
          gh repo create "${{ github.repository_owner }}/$REPO_NAME" --private --confirm

          # Create second repo for complete example (has trunk-based config)
          if [ "${{ matrix.example }}" = "complete" ]; then
            if [[ ! "$TRUNK_REPO_NAME" =~ ^temp-ci- ]]; then
              echo "ERROR: Trunk repository name '$TRUNK_REPO_NAME' does not contain required safety prefix 'temp-ci-'"
              exit 1
            fi
            echo "Creating temporary trunk repository: $TRUNK_REPO_NAME"
            gh repo create "${{ github.repository_owner }}/$TRUNK_REPO_NAME" --private --confirm
          fi

          echo "repo_name=$REPO_NAME" >> "$GITHUB_OUTPUT"
          echo "trunk_repo_name=$TRUNK_REPO_NAME" >> "$GITHUB_OUTPUT"
          echo "created_repos=$REPO_NAME $TRUNK_REPO_NAME" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Plan
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: |
          if [ "${{ matrix.example }}" = "complete" ]; then
            terraform plan -input=false \
              -var="github_owner=${{ github.repository_owner }}" \
              -var="repository_name=${{ steps.temp_repo.outputs.repo_name }}" \
              -var="trunk_repository_name=${{ steps.temp_repo.outputs.trunk_repo_name }}"
          else
            terraform plan -input=false \
              -var="github_owner=${{ github.repository_owner }}" \
              -var="repository_name=${{ steps.temp_repo.outputs.repo_name }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup temporary repositories
        if: always()
        run: |
          # Function to safely delete a repository with multiple safety checks
          safe_delete_repo() {
            local repo_name="$1"
            local repo_full_name="${{ github.repository_owner }}/$repo_name"

            # Safety check 1: Repository name must contain temp-ci prefix
            if [[ ! "$repo_name" =~ ^temp-ci- ]]; then
              echo "SAFETY CHECK FAILED: Repository '$repo_name' does not contain required 'temp-ci-' prefix"
              echo "Skipping deletion for safety"
              return 1
            fi

            # Safety check 2: Repository name must contain run ID
            if [[ ! "$repo_name" =~ ${{ github.run_id }} ]]; then
              echo "SAFETY CHECK FAILED: Repository '$repo_name' does not contain run ID '${{ github.run_id }}'"
              echo "Skipping deletion for safety"
              return 1
            fi

            # Safety check 3: Repository must be private (additional safety)
            local visibility=$(gh repo view "$repo_full_name" --json visibility --jq '.visibility' 2>/dev/null || echo "unknown")
            if [[ "$visibility" != "private" ]]; then
              echo "SAFETY CHECK FAILED: Repository '$repo_name' is not private (visibility: $visibility)"
              echo "Skipping deletion for safety"
              return 1
            fi

            # Safety check 4: Repository must be very recent (created within last hour)
            local created_at=$(gh repo view "$repo_full_name" --json createdAt --jq '.createdAt' 2>/dev/null || echo "")
            if [[ -n "$created_at" ]]; then
              local created_timestamp=$(date -d "$created_at" +%s 2>/dev/null || echo "0")
              local current_timestamp=$(date +%s)
              local age_seconds=$((current_timestamp - created_timestamp))

              # If repository is older than 1 hour (3600 seconds), don't delete
              if [[ $age_seconds -gt 3600 ]]; then
                echo "SAFETY CHECK FAILED: Repository '$repo_name' is too old (${age_seconds}s > 3600s)"
                echo "Skipping deletion for safety"
                return 1
              fi
            fi

            echo "All safety checks passed for repository: $repo_name"
            echo "Deleting temporary repository: $repo_full_name"

            if gh repo delete "$repo_full_name" --yes 2>/dev/null; then
              echo "✓ Successfully deleted: $repo_full_name"
            else
              echo "⚠ Failed to delete: $repo_full_name (may have already been deleted or access denied)"
            fi
          }

          # Clean up main repository
          if [[ -n "${{ steps.temp_repo.outputs.repo_name }}" ]]; then
            safe_delete_repo "${{ steps.temp_repo.outputs.repo_name }}"
          else
            echo "No main repository name found in outputs"
          fi

          # Clean up trunk repository if it exists
          if [[ "${{ matrix.example }}" == "complete" ]] && [[ -n "${{ steps.temp_repo.outputs.trunk_repo_name }}" ]]; then
            safe_delete_repo "${{ steps.temp_repo.outputs.trunk_repo_name }}"
          fi

          echo "Cleanup process completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  integration:
    name: Integration Test (ephemeral repo)
    runs-on: ubuntu-24.04
    # Run only on main/develop pushes or manual dispatch to avoid API rate limits on PRs
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
    needs: [validate, examples] # Ensure static checks pass first
    strategy:
      matrix:
        example: [minimal, complete]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Authenticate gh CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create ephemeral test repository
        id: repo
        run: |
          OWNER="${{ github.repository_owner }}"
          TIMESTAMP=$(date +%s)
          REPO_NAME="temp-ci-integration-${{ matrix.example }}-${{ github.run_id }}-${TIMESTAMP}"

          # Safety check: ensure names contain required safety prefixes
          if [[ ! "$REPO_NAME" =~ ^temp-ci- ]]; then
            echo "ERROR: Repository name '$REPO_NAME' does not contain required safety prefix 'temp-ci-'"
            exit 1
          fi

          echo "Creating temporary repository: $OWNER/$REPO_NAME"
          gh repo create "$OWNER/$REPO_NAME" --private --confirm
          echo "repo_name=$REPO_NAME" >> "$GITHUB_OUTPUT"
          echo "full_name=$OWNER/$REPO_NAME" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Init
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: terraform init -backend=false

      - name: Terraform Apply
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: |
          terraform apply -auto-approve \
            -var="github_owner=${{ github.repository_owner }}" \
            -var="repository_name=${{ steps.repo.outputs.repo_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify repository configuration
        run: |
          echo "Verifying repository was configured correctly..."
          gh repo view "${{ steps.repo.outputs.full_name }}" --json name,visibility,hasWikiEnabled
          gh api repos/${{ steps.repo.outputs.full_name }}/rulesets --jq '.[] | {name: .name, enforcement: .enforcement}'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Destroy
        if: always()
        working-directory: modules/github-gitflow/examples/${{ matrix.example }}
        run: |
          terraform destroy -auto-approve \
            -var="github_owner=${{ github.repository_owner }}" \
            -var="repository_name=${{ steps.repo.outputs.repo_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete ephemeral repository
        if: always()
        run: |
          # Function to safely delete a repository with multiple safety checks
          safe_delete_repo() {
            local repo_full_name="$1"
            local repo_name=$(basename "$repo_full_name")

            # Safety check 1: Repository name must contain temp-ci prefix
            if [[ ! "$repo_name" =~ ^temp-ci- ]]; then
              echo "SAFETY CHECK FAILED: Repository '$repo_name' does not contain required 'temp-ci-' prefix"
              echo "Skipping deletion for safety"
              return 1
            fi

            # Safety check 2: Repository name must contain run ID
            if [[ ! "$repo_name" =~ ${{ github.run_id }} ]]; then
              echo "SAFETY CHECK FAILED: Repository '$repo_name' does not contain run ID '${{ github.run_id }}'"
              echo "Skipping deletion for safety"
              return 1
            fi

            # Safety check 3: Repository must be private
            local visibility=$(gh repo view "$repo_full_name" --json visibility --jq '.visibility' 2>/dev/null || echo "unknown")
            if [[ "$visibility" != "private" ]]; then
              echo "SAFETY CHECK FAILED: Repository '$repo_name' is not private (visibility: $visibility)"
              echo "Skipping deletion for safety"
              return 1
            fi

            echo "All safety checks passed for repository: $repo_name"
            echo "Deleting temporary repository: $repo_full_name"

            if gh repo delete "$repo_full_name" --yes 2>/dev/null; then
              echo "✓ Successfully deleted: $repo_full_name"
            else
              echo "⚠ Failed to delete: $repo_full_name (may have already been deleted or access denied)"
            fi
          }

          if [[ -n "${{ steps.repo.outputs.full_name }}" ]]; then
            safe_delete_repo "${{ steps.repo.outputs.full_name }}"
          else
            echo "No repository name found in outputs"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
